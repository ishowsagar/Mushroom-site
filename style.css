/* @layer reset, base, layout, component; - we canb declare the order of layers ,
 so when we wanna look which css hs got higher
 specificity , we can tell it by looking at the order of css layers */
@view-transition {
  navigation: auto;
}

/* ::view-transition-group(root) {
  animation-duration: 2s;
} */

@layer reset {
  /* Box sizing rules */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  /* Prevent font size inflation */
  html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  /* Remove default margin in favour of better control in authored CSS */
  body,
  h1,
  h2,
  h3,
  h4,
  p,
  figure,
  blockquote,
  dl,
  dd {
    margin-block-end: 0;
  }

  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
  ul[role="list"],
  ol[role="list"] {
    list-style: none;
  }

  /* Set core body defaults */
  body {
    min-height: 100vh;
    line-height: 1.5;
  }

  /* Set shorter line heights on headings and interactive elements */
  h1,
  h2,
  h3,
  h4,
  button,
  input,
  label {
    line-height: 1.1;
  }

  /* Balance text wrapping on headings */
  h1,
  h2,
  h3,
  h4 {
    text-wrap: balance;
  }

  /* Does not let paragraphs have just one weird word at the end */
  p,
  li {
    text-wrap: pretty;
  }

  /* A elements that don't have a class get default styles */
  a:not([class]) {
    text-decoration-skip-ink: auto;
    color: currentColor;
  }

  /* Make images easier to work with */
  img,
  picture {
    max-width: 100%;
    display: block;
  }

  /* Inherit fonts for inputs and buttons */
  input,
  button,
  textarea,
  select {
    font-family: inherit;
    font-size: inherit;
  }

  /* Make sure textareas without a rows attribute are not tiny */
  textarea:not([rows]) {
    min-height: 10em;
  }

  /* Anything that has been anchored to should have extra scroll margin */
  :target {
    scroll-margin-block: 5ex;
  }
}

@layer base {
  :root {
    /* clr-brown-500 -> 5000 here is the font-weight, so we can tell it by weight,
     we are using if a lighter we go for smalller value 
    or if we go for bold n same color we go for 900*/
    --clr-white: hsl(0, 0%, 100%);
    --clr-gray-100: hsl(0, 2%, 79%);
    --clr-brand-400: hsl(25, 88%, 75%);
    --clr-brand-500: hsl(25, 88%, 66%);
    --clr-green-300: hsl(143, 19%, 69%);
    --clr-green-400: hsl(143, 19%, 49%);
    --clr-green-500: hsl(143, 38%, 37%);
    --clr-green-600: hsl(145, 29%, 19%);

    /* new custom props for themes */
    --clr-brown-100: hsl(10, 5%, 90%);
    --clr-brown-200: hsl(9, 7%, 86%);
    --clr-brown-300: hsl(9, 8%, 75%);
    --clr-brown-400: hsl(0, 6%, 60%);
    /* ..... */

    --clr-brown-500: hsl(10, 5%, 25%);
    --clr-brown-600: hsl(9, 7%, 21%);
    --clr-brown-700: hsl(9, 8%, 16%);
    --clr-brown-800: hsl(0, 6%, 15%);
    --clr-brown-900: hsl(0, 6%, 13%);

    --clr-orange-500: hsl(28, 43%, 28%);
    --clr-red-500: hsl(359, 34%, 24%);
    --clr-teal-500: hsl(186, 42%, 25%);

    --ff-body: "Fira Sans", sans-serif;
    --ff--heading: "Outfit", sans-serif;

    /* here the number(500) means font-size higherity */
    --fs-300: 0.875rem;
    --fs-400: 1rem;
    --fs-500: 1.125rem;
    --fs-600: 1.25rem;
    --fs-700: 1.5rem;
    --fs-800: 2rem;
    --fs-900: 3.75rem;
    --fs-1000: 3.75rem;

    /* setting up font-szies for screens larger than 760px
we can directly use width > or =</> to set @queries in more understandble way */
    @media (width > 760px) {
      --fs-300: 0.875rem;
      --fs-400: 1rem;
      --fs-500: 1.25rem;
      --fs-600: 1.5rem;
      --fs-700: 2rem;
      --fs-800: 3rem;
      --fs-900: 5rem;
      --fs-1000: 7.5rem;
    }
  }
  /* We know we have this fs but what if we wanna use for main only, 
we would not know with font size or weight or color, 
so we would nest them inside the variables and then we can tell,
i'm using main text fs/color/or using this bg color for bg by declaring the speicific variables
in their respective nested vars. */
  :root {
    --text-main: var(--clr-gray-100);
    --text-high-contrast: var(--clr-white);
    --text-brand: var(--clr-brand-500);
    --text-brand-light: var(--clr-brand-400);

    --background-accent-light: var(--clr-green-400);
    --background-accent-main: var(--clr-green-500);
    --background-accent-dark: var(--clr-green-600);

    --background-extra-light: var(--clr-brown-500);
    --background-light: var(--clr-brown-600);
    --background-main: var(--clr-brown-700);
    --background-dark: var(--clr-brown-800);
    --background-extra-dark: var(--clr-brown-900);

    --font-size-heading-sm: var(--fs-700);
    --font-size-heading-regular: var(--fs-800);
    --font-size-heading-lg: var(--fs-900);
    --font-size-heading-xl: var(--fs-1000);

    --font-size-sm: var(--fs-300);
    --font-size-regular: var(--fs-400);
    --font-size-md: var(--fs-500);
    --font-size-lg: var(--fs-600);

    --border-radius-1: 0.25rem;
    --border-radius-2: 0.5rem;
    --border-radius-3: 0.75rem;

    /* making custom themes for site based on ourt custom props we have set up above */
    @media (prefers-color-scheme: light) {
      --text-main: var(--clr-gray-700);
      --text-high-contrast: var(--clr-brown-900);

      --background-accent-dark: var(--clr-green-300);
      --background-extra-light: var(--clr-brown-100);
      --background-light: var(--clr-brown-200);
      --background-main: var(--clr-brown-300);
      --background-dark: var(--clr-brown-400);
      --background-extra-dark: var(--clr-brown-500);
    }
  }

  html {
    font-family: var(--ff-body);
    line-height: 1.6;
    scroll-padding: 2.7rem;
  }
  /* setting if user has any issues with motion, so we only set what users have pref, if no--> apply this */
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth; /* work like scroll into view when navigated to different sections of the page using links|whatever */
    }
  }

  body {
    font-size: var(--font-size-regular);
    color: var(--text-main);
    background-color: light-dark(var(--background-dark),var(--background-main));
  }
  h1,
  h2,
  h3,
  h4 {
    font-family: var(--ff--heading);
    color: var(--text-high-contrast);
  }

  h1 {
    font-size: var(--font-size-heading-lg);
  }

  a {
    color: var(--text-high-contrast);
  }

  a:hover,
  a:focus-visible {
    color: var(--text-brand-light);
  }

  img {
    border-radius: var(--border-radius-3);
  }
}

@layer layout {
  /* .flow > * + * {
      css code --> It is like saying select everything and apply css on *except the first child in this 
      /*container where we applied this css class
    } */

  .flex-group {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .flow > * + * {
    margin-top: var(
      --flow-space,
      1em
    ); /* we can directly declare var with its value inside the prop where we ar creating it */
  }

  .grid-flow {
    display: grid; /* notice* we used rem units to make it relative to the font size */
    gap: var(
      --grid-flow-gap,
      1rem
    ); /* we used here grid gap to give gap --> between each child element *consistently */
  }
  /* 12 mini-cards layout */
  .grid-auto-fit {
    --auto-fit-min-col-size: 250px;
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--auto-fit-min-col-size), 100%), 1fr)
        /* for min grid value, we are setting min atleast to be 600px or if it does not fit, then take the whole 100% min space available */
        /* always try to setup your min values like that, even if it is 100px, use 100% to set things up neatly */
    ); /* 1fr --> take up space what's available and atleast have min 300px grid */
  }

  .equal-columns {
    display: grid;
    gap: var(--equal-columns-gap, 1rem);
    align-items: var(--equal-columns-vertical-alignment, stretch);

    @media (width > 760px) {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
    }
    &[data-gap="large"] {
      --equal-columns-gap: 2rem;
    }
    & [data-alignment="centered"] {
      --equal-columns-vertical-alignment: center;
    }
  }
  .section {
    /* set up acustom prop for padding and that will be used in the context of padding-block (cross-axis level) */
    --padding: 3.75rem;

    padding-block: var(
      --padding
    ); /* Earlier we used inline for main axis, Block -> explicitly sets thjings for cross/vertical axis */

    @media (width > 760px) {
      --padding: 8rem;

      &[data-padding="compact"] {
        --padding: 4.5rem;
      }
    }
  }

  .wrapper {
    --wrapper-max-width: 1130px; /* setting up custom property to use as var for more readibility of the code*/

    max-width: var(--wrapper-max-width);
    margin-inline: auto; /* center the content with equal margin both sides and margin-iline -> main-axis(inline prop)*/
    padding-inline: 1rem; /* 1 rem here is -> 16px */

    /* we actually want to have container width - 1130px , but since we using border-box, 
    everything including adding is included in the whole container, 
    so we explicitly want to have our cotainer sized 1130px*/
    box-sizing: content-box;

    & [data-width="narrow"] {
      --wrapper-max-width: 720px;
    }
    & [data-width="wide"] {
      --wrapper-max-width: 1330px; /* it is taking idea in which context we have used this variable in main prop*/
    }
  }
}

@layer components {
  .skip-to-main:not(:focus) {
    /* default hide it visually when not focused */
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    white-space: nowrap;
    width: 1px;
    position: absolute;
  }

  .skip-to-main {
    /* Only Show when focused */
    top: 100px;
    left: 10px;
    position: absolute;
    background-color: var(--background-accent-main);
    padding: 1rem;
    border-radius: var(--border-radius-2);
  }

  .site-header {
    padding-block: 1rem;
    overflow-x: clip; /* it makes sure if there is an overlow issue,
     anything position reltive to this would not be shown,
      it would be clipped in desired axis. */
    /* its like we are not gona show the content behind our nav to be empty space to scroll into view */
    position: relative;
  }
  .site-header__inner {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: space-between;
  }

  [aria-controls="primary-nav"] {
    z-index: 100;
    cursor: pointer;
    background: transparent;
    border: none;

    img {
      border-radius: 0;
      /* as all images were set to a border default radius so we have
      to explicitly reset down it to zero here for this hamburger menu icon image */
    }
  }
  /* For normal desktop view, we are hiding button out of the screen */
  [aria-controls="primary-nav"] {
    display: none;
  }

  .primary-navigation {
    ul {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 1rem;
    }

    a {
      text-decoration: none;
    }

    @media (width < 760px) {
      & {
        display: none;
        opacity: 0;
        transition: transform 1s, opacity 1s, display 1s;
        transition-behavior: allow-discrete;
        transform: translateX(100%);
        position: absolute;
        z-index: 10;
        top: 0;
        right: 0;
        font-size: var(--font-size-lg);
        font-family: var(--ff--heading);
        font-weight: 700;
        background-color: var(--background-accent-main);
        padding: 2rem;
        border-radius: 0px 0px 0px var(--border-radius-3);
      }

      ul {
        gap: 0px;
        flex-direction: column;

        li {
          --delay: 0.37s;
          translate: 50%;
          /* opacity: 0; */
          transition: translate 0.77s var(--delay), opacity 0.77s var(--delay);
        }

        li:nth-child(2) {
          --delay: 0.5s;
        }

        li:nth-child(3) {
          --delay: 0.67s;
        }

        li + li {
          margin-block-start: 1.5rem;
          padding-block-start: 1.5rem;
          border-top: 2px solid var(--background-accent-light);
        }
      }
    }
  }

  @media (width < 760px) {
    [aria-controls="primary-nav"] {
      display: block;
    }
    [aria-expanded="true"] + .primary-navigation {
      /* here we are selecting the element just after this element using ~ */
      display: block;
      opacity: 1;
      transform: translateX(0%);
      /* we saving starting state to let it know from where to transition here */
      @starting-style {
        opacity: 0;
        transform: translateX(100%);
      }

      li {
        translate: 0 0;
        opacity: 1;

        @starting-style {
          translate: 50% 0;
          opacity: 0;
        }
      }
    }
  }

  .site-footer {
    display: grid;
    gap: 2rem; /* if you see consistent spaicng down the column,
     you might wanna use grid and give it consistent gap* to set things apart neatly and consistently */
    background-color: light-dark(
      var(--background-light),
      var(--background-dark)
    );
    text-align: center;
    padding-block: 2rem;

    a {
      color: var(--text-main);
    }

    a:hover,
    a:focus-visible {
      color: var(--text-brand-light);
    }
  }

  .site-footer__title {
    font-size: var(--font-size-lg);
    font-family: var(--ff--heading);
    font-weight: 700;
  }

  .hero {
    text-align: center;
    font-size: var(--font-size-md);
    /* color: light-dark(var(--clr-brown-100)); */
    color: var(--clr-brown-100);
    background-image: url(assets/hero.webp);
    background-size: cover;
    background-position: center;
    /* animating when we scroll and it fades the 
    last element/section whatever it is applied on */
    animation: fade-out forwards;
    animation-timeline: view();
    animation-range-start: exit;
  }

  .card {
    animation: fade-in both;
    animation-timeline: view();
    /* animation-range-start: exit;  */
  }

  .hero__title {
    font-size: var(--font-size-heading-lg);

    span {
      display: block; /* so text does not behave weirdly so we can have texts words seperately each block */
      font-size: var(
        --font-size-heading-xl
      ); /* this so clean way to select the child 
      element by nesting that element inside,
      instead of using desecendat selector with arrows and gets confused */
      color: var(--text-brand);
    }
  }

  .mushroom-guide {
    /* pulling the custo prop from .card that it will inherit it */
    --card-title-font-size: var(--font-size-lg);
    --card-title-color: var(--text-high-contrast);
    --card-gap: 0.75rem;
  }

  .faq-bento {
    /* normal mobile view layout */
    display: grid;
    --card-title-color: --text-high-contrast;
    gap: 1rem;
    grid-template-areas:
      "card-one"
      "card-two"
      "card-three"
      "card-four";

    @media (width > 585px) {
      grid-template-areas:
        "card-one card-two"
        "card-three card-four";
    }

    /* desktop view Grid-layout */
    @media (width > 885px) {
      grid-template-columns: repeat(3, 1fr);
      grid-template-areas:
        "card-one card-two card-four"
        "card-three card-three card-four";
    }

    /* dynamically assigning the names to the card for grid-areas layout we defined up above */

    .card > img {
      height: 100%;
      object-fit: cover;
    }
    /* Layouting the images order ( where would they be in the card container) */
    @media (width > 585px) {
      .card:nth-child(even) > img {
        order: 3; /* as we are chnagig order as order of element inside the card container,
        so img gets the order 3 as lst element had that order */
      }
    }

    .card:nth-child(1) {
      grid-area: card-one;
    }
    .card:nth-child(2) {
      grid-area: card-two;
    }
    .card:nth-child(3) {
      grid-area: card-three;

      @media (width > 885px) {
        display: grid;
        gap: 1rem;
        grid-template-columns: repeat(2, 1fr);

        img {
          /* line numbers --> grid/row or col : from which col|row   / EXTEND till which col|row */
          grid-column: 1 / 2; /* here we are setting how this will extend based on *Grid-line numbers (use dev tools to inspect it) */
          grid-row: 1 / 3; /* Tip - remember it like we are setting how till col/row we want it to EXTEND* */
        }
      }
    }
    .card:nth-child(4) {
      grid-area: card-four;
    }
  }

  .card {
    display: flex;
    flex-direction: column;
    gap: var(--card-gap, 1rem);
    padding: 1rem;
    background-color: var(--background-light);
    border-radius: var(--border-radius-3);

    img {
      border-radius: var(--border-radius-2);
    }
  }

  .card__title {
    font-size: var(--card-title-font-size, var(--font-size-heading-sm));
    color: var(--card-title-color, var(--text-brand));
  }

  .card__note {
    background-color: var(--background-extra-light);
    margin-block-start: auto; /* as our note box was leaving available extra space beneath it, so we set the top margin to auto, to auto adjust and set it like sticking ot the bottom of the card layout */
    padding: 0.75rem; /* it is same like we we give the main-axis margin to auto, to take the extra space around n center it */
    border-radius: var(--border-radius-2);
  }

  .tag-list {
    display: flex;

    gap: 0.5rem;
    flex-wrap: wrap;

    li {
      font-family: var(--ff--heading);
      font-size: var(--font-size-sm);
      color: var(--text-high-contrast);
      padding: 0 0.25rem;
      background-color: var(--tag-bg, red);
      border-radius: var(--border-radius-1);
    }
    /* styling the all cards in second page */
    [data-edible="edible"] {
      background-color: var(--background-accent-main);
    }

    [data-edible="toxic"] {
      background-color: var(--clr-red-500);
    }

    [data-season="summer"] {
      background-color: var(--background-accent-main);
    }

    [data-season="spring"] {
      background-color: var(--clr-teal-500);
    }

    [data-season="fall"] {
      background-color: var(--clr-orange-500);
    }
  }

  .button {
    /* we are here* styling the links with class --> button */
    display: inline-flex; /* inside cotext,text-icon will be in flex display */
    font-size: var(--font-size-md);
    text-decoration: none;
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    font-family: var(--ff--heading);
    font-weight: 700;
    border-radius: var(--border-radius-2);
    cursor: pointer;
  }

  .button:hover,
  .button:focus-visible {
    color: var(--text-high-contrast);
    background-color: var(--background-accent-light);
  }

  select {
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    color: var(--text-high-contrast);
    border-radius: var(--border-radius-2);
    border: none;
  }
}

@layer utilities {
  [hidden] {
    /* hidden attribute */
    display: none;
  }

  .resizing * {
    transition: none !important;
    animation-play-state: paused !important;
  }

  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .text-center {
    text-align: center;
  }
  .text-brand {
    color: var(--text-brand);
  }
  .text-high-contrast {
    color: var(--text-high-contrast);
  }

  .section-title {
    font-size: var(--font-size-heading-regular);
  }

  .background-base {
    background-color: var(--background-base);
  }
  .background-light {
    background-color: var(--background-light);
  }
  .background-extra-light {
    background-color: var(--background-extra-light);
  }
  .background-dark {
    background-color: var(--background-dark);
  }
  .background-extra-dark {
    background-color: light-dark(
      var(--background-extra-light),
      var(--background-accent-dark)
    );
  }

  .background-accent {
    background-color: var(--background-accent-dark);
  }

  .font-size-sm {
    font-size: var(--font-size-sm);
  }
  .font-size-regular {
    font-size: var(--font-size-regular);
  }
  .font-size-md {
    font-size: var(--font-size-md);
  }
  .font-size-lg {
    font-size: var(--font-size-lg);
  }
}

@keyframes fade-out {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}

/* @keyframes fade-in {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
} */
